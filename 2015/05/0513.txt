＠MTMIアルゴリズム
・修士論文内容確認
　－事前撮影した映像をデータベース化(p1)
　　→trainとして与えているのは画像集合
　－屋内での使用を想定～(p2)
　　←GPSが使えない環境
　　→室内では屋外よりも似たような場面が生じる場合が高いと考えられる(p7)
　－多次元ベクトルやバイナリ値で記述(p3)
　　→バイナリ値で記述した場合の距離の計算方法と実装の有無
　－検索画像ペアはステレオカメラとみなせる(p4)
　　→ベースラインと精度について？
　－マッチ数が少ない検索画像ペアの閾値処理(p5~7)
　　→誤対応の除外はできるが位置はどうする？

・確認事項
　－最終的な目標(精度and処理時間)

☆やりたいこと
・訓練画像群の特徴量ベクトルのデータベース化
//*.txt
	ImageID, KeyPointID, Key_x, Key_y
	[SIFT特徴量128次元ベクトル]
//
→バイナリ値で記述したほうが速い?
　→SIFT特徴量はnumpy.ndarrayで記述されており,バイナリ出力が可能
　　trainの画像1枚ごとにnpyファイル(バイナリファイル)を作成するか,
　　一つの配列にまとめて出力するか？
　　→実行速度のテスト(ベンチマーク用の実行時間計測も実装)
　　　query　3枚,　train　520枚

1.　npyフォルダを作成し,画像ごとにバイナリファイルを出力
	reading images of query/query.txt       ...     done
	>       image number    : 3
	>       elapsed time    : 0.0   sec

	reading images of train/train.txt       ...     done
	>       image number    : 520
	>       elapsed time    : 0.986 sec

	extracting keypoints from images of query       ...     done
	>       keypoint number : 720
	>       elapsed time    : 0.203 sec

	extracting keypoints from images of train       ...     done
	>       keypoint number : 124800
	>       elapsed time    : 34.727        sec

	computing descripts for keypoints of query      ...     done
	>       elapsed time    : 0.25  sec

	computing descripts for keypoints of train      ...     done
	>       elapsed time    : 42.183        sec

	criate database ...     done
	>       elapsed time    : 0.494 sec

2.　ndarrayを連結し,最後に一つのファイルに出力
	criate database ...　終了しない(少なくとも20分程度)
　→画像ごとに出力したほうが圧倒的に早い
　　numpy.arrayの連結はメモリを再確保してコピーするため時間がかかっている？
　　→読み込み時にファイルI/Oの回数で実行速度にどの程度差が出るかわからないが,
　　　よほどの差が出ない限り1.でよさそう

・実際の訓練画像群で実行
	reading images of query/query.txt       ...     done
	>       image number    : 3
	>       elapsed time    : 0.0   sec

	reading images of I:/data/train/train.txt       ...     done
	>       image number    : 3450
	>       elapsed time    : 44.062        sec

	extracting keypoints from images of query       ...     done
	>       keypoint number : 720
	>       elapsed time    : 2.0   sec

	extracting keypoints from images of train       ...     done
	>       keypoint number : 828000
	>       elapsed time    : 357.797       sec

	computing descripts for keypoints of query      ...     done
	>       elapsed time    : 0.609 sec

	computing descripts for keypoints of train      ...     done
	>       elapsed time    : 577.453       sec

	criate database ...     done
	>       elapsed time    : 270.421       sec

・ファイル出力によって処理時間はおよそ4.5倍程度となった(train40枚)

・マッチングアルゴリズムの変更
　線形探索→kd-tree,LSH等の最近傍探索アルゴリズムの実装
　VisualWordsを使ったクラスタリング的手法(1秒刻みなら
　→詳しくはないので調べる必要あり

・データベースの作成と読み込みまで実装完了
　→内容が一致しているかの確認
	print tkp[0][0].pt, tkp[10][10].pt, tkp[20][20].pt
	print tdes[0][0]
	print tdes[10][10]
	print tdes[20][20]

※　初期読み込み
criate database ...
>       elapsed time    : 0.203 sec
(7.204178810119629, 10.067791938781738) (139.32830810546875, 82.97843933105469) (168.1095733642578, 89.66102600097656)
[   3.    4.    4.    6.    1.    0.    0.    0.   48.    1.    3.    7.
    7.    1.    0.   10.  179.    0.    0.    0.    1.    0.    0.   98.
  110.    1.    0.    4.    5.    1.    0.   41.    0.    5.   13.    8.
    0.    0.    0.    0.  110.    7.    9.    6.    1.    0.    0.    8.
  179.   16.    1.    0.    0.    0.    0.   60.   95.   14.    8.   33.
    6.    0.    0.   12.    1.    4.   11.   11.    1.    0.    0.    0.
  126.   24.   17.    8.    0.    0.    0.    2.  179.  129.   20.    1.
    0.    0.    0.    4.   36.   53.  102.   73.    0.    0.    0.    0.
    1.    2.    5.   18.    9.    0.    0.    0.   53.   47.   15.   18.
    3.    0.    0.    0.  139.  168.   15.    0.    0.    0.    0.    0.
    6.   41.   55.   15.    0.    0.    0.    0.]
[  24.    0.    0.    0.    3.   16.   31.  107.    1.    0.    0.    9.
   52.   62.   16.    9.    5.    0.    0.    7.   15.    8.   13.  107.
    2.    0.    0.    0.    3.   16.   67.  114.   31.    3.    5.   27.
   22.   19.   23.  101.   12.    3.    1.   62.  114.   65.   10.    9.
  114.    8.    1.    5.   11.    9.    6.  114.   30.    4.    3.   21.
   19.   10.   21.   96.   21.   23.   89.  114.    7.    0.    0.    5.
   20.   29.   42.  114.   30.    0.    0.    0.  114.  114.   43.    8.
    1.    0.    0.   10.   18.   34.  102.  114.    4.    0.    0.    4.
    0.    8.  114.   58.    0.    0.    0.    0.   12.   51.   73.   36.
    0.    0.    0.    0.   21.  114.   41.    1.    0.    0.    0.    0.
    0.   14.   72.   45.    1.    0.    0.    0.]
[   5.    4.    4.    9.   27.    8.    2.    3.    8.    6.    1.    4.
   14.   11.   50.   22.   56.   28.    2.    7.    9.    9.   52.   37.
   10.    8.   13.   42.   50.   50.   23.    8.   45.   13.   26.   16.
    3.    1.    1.   13.  124.   22.    7.    5.    5.   13.  123.  124.
   21.    7.    7.   28.   36.   66.  124.   66.   28.    2.    1.    1.
    8.   83.  124.   48.   69.   50.   27.   14.    4.    1.    0.    4.
  124.  124.   86.   20.    3.    2.    4.   20.   91.   42.   96.  101.
   28.   10.    5.    7.  124.   11.    2.    2.    1.    1.   23.   44.
   29.   10.    3.    4.    9.   21.   22.   51.   44.   36.   20.    1.
    0.    0.    4.   42.  124.   16.   19.    2.    0.    0.    0.   21.
  124.    8.    0.    0.    0.    0.    0.   49.]


※データベース読み込み
load database ...
>       elapsed time    : 0.156 sec
(7.203999996185303, 10.067999839782715) (139.3280029296875, 82.97799682617188) (168.11000061035156, 89.66100311279297)
[   3.    4.    4.    6.    1.    0.    0.    0.   48.    1.    3.    7.
    7.    1.    0.   10.  179.    0.    0.    0.    1.    0.    0.   98.
  110.    1.    0.    4.    5.    1.    0.   41.    0.    5.   13.    8.
    0.    0.    0.    0.  110.    7.    9.    6.    1.    0.    0.    8.
  179.   16.    1.    0.    0.    0.    0.   60.   95.   14.    8.   33.
    6.    0.    0.   12.    1.    4.   11.   11.    1.    0.    0.    0.
  126.   24.   17.    8.    0.    0.    0.    2.  179.  129.   20.    1.
    0.    0.    0.    4.   36.   53.  102.   73.    0.    0.    0.    0.
    1.    2.    5.   18.    9.    0.    0.    0.   53.   47.   15.   18.
    3.    0.    0.    0.  139.  168.   15.    0.    0.    0.    0.    0.
    6.   41.   55.   15.    0.    0.    0.    0.]
[  24.    0.    0.    0.    3.   16.   31.  107.    1.    0.    0.    9.
   52.   62.   16.    9.    5.    0.    0.    7.   15.    8.   13.  107.
    2.    0.    0.    0.    3.   16.   67.  114.   31.    3.    5.   27.
   22.   19.   23.  101.   12.    3.    1.   62.  114.   65.   10.    9.
  114.    8.    1.    5.   11.    9.    6.  114.   30.    4.    3.   21.
   19.   10.   21.   96.   21.   23.   89.  114.    7.    0.    0.    5.
   20.   29.   42.  114.   30.    0.    0.    0.  114.  114.   43.    8.
    1.    0.    0.   10.   18.   34.  102.  114.    4.    0.    0.    4.
    0.    8.  114.   58.    0.    0.    0.    0.   12.   51.   73.   36.
    0.    0.    0.    0.   21.  114.   41.    1.    0.    0.    0.    0.
    0.   14.   72.   45.    1.    0.    0.    0.]
[   5.    4.    4.    9.   27.    8.    2.    3.    8.    6.    1.    4.
   14.   11.   50.   22.   56.   28.    2.    7.    9.    9.   52.   37.
   10.    8.   13.   42.   50.   50.   23.    8.   45.   13.   26.   16.
    3.    1.    1.   13.  124.   22.    7.    5.    5.   13.  123.  124.
   21.    7.    7.   28.   36.   66.  124.   66.   28.    2.    1.    1.
    8.   83.  124.   48.   69.   50.   27.   14.    4.    1.    0.    4.
  124.  124.   86.   20.    3.    2.    4.   20.   91.   42.   96.  101.
   28.   10.    5.    7.  124.   11.    2.    2.    1.    1.   23.   44.
   29.   10.    3.    4.    9.   21.   22.   51.   44.   36.   20.    1.
    0.    0.    4.   42.  124.   16.   19.    2.    0.    0.    0.   21.
  124.    8.    0.    0.    0.    0.    0.   49.]

　→キーポイントの座標をデータベース化する際に小数点以下3桁で丸めているため丸め誤差が発生している
　　→影響を調べる必要あり
　　　→ピクセル値なのにそもそも小数なのはなぜ？

・処理速度確認
　訓練データ200枚
　33.188sec　→　1.438sec

☆memo
・カメラレジストレーション
　→カメラの位置合わせ

＠バイナリエディタ　bzのインストール